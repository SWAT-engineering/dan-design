@encoding{LitteEndian}
syntax ZipFormat = 
    LocalDeflatedFile[] compressedData 
    DirEntry[] directories  
    EndOfDir(count(compressedData), count(directories), directories.offset) footer
    ;

external u32 crc32(u8[] data);  // primitive types such as boolean or unsigned integers are always values
external u8[] inflate(u8[] data);


syntax LocalDeflatedFile
  = u32 fileSignature == 0x04034b50
    u16 extractVersion
    u16 bitflag
    u16 compressionMethod == 8 // shorthand for this: { *compressionMethod == 8 }
    // ...
    u32 crc32
    u32 compressedSize
    u32 uncompressedSize
    u16 filenameSize
    u16 extraFieldSize
    u8[filenameSize] filename
    u8[extraFieldSize] extraField
    u8[compressedSize] compressedData { crc32(inflate(compressedData)) == crc32 }
    ;

syntax DirEntry
  = u32 signature == 0x02014b50
    u16 makeVersion
    // ...
    u16 filenameSize
    u16 extraFieldSize
    u16 fileCommentSize
    u16 fileDisk == 0
    // ...
    u8[filenameSize] filename
    u8[extraFieldSize] extraField
    u8[fileCommentSize] fileComment
    ;

syntax EndOfDir(int compressedCount, int dirCount,  int startOfDirectories)
  = u32 signature == 0x06054b50
    u16 diskNumber == 0
    u16 dirDisk == 0
    u16 numLocalDirs == compressedCount // what about conversion between int (or count) and u16? which encoding to use?
    u16 numTotalDirs == numLocalDirs
    u32 dirSize == signature.offset - startOfDirectories
    u32 dirOffset == startOfDirectories
    u16 commentSize
    u8[commentSize] comment
    ;
